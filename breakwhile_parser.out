Grammar:

Rule 0     S' -> program
Rule 1     program -> stmts
Rule 2     stmts -> empty
Rule 3     stmts -> stmts stmt
Rule 4     stmt -> WHILE { stmts }
Rule 5     stmt -> IF { stmts }
Rule 6     stmt -> BREAK ;
Rule 7     stmt -> ID ;
Rule 8     stmt -> error ;
Rule 9     empty -> <empty>

Terminals, with rules where they appear:

;                    : 6 7 8
BREAK                : 6
ID                   : 7
IF                   : 5
WHILE                : 4
error                : 8
{                    : 4 5
}                    : 4 5

Nonterminals, with rules where they appear:

empty                : 2
program              : 0
stmt                 : 3
stmts                : 1 3 4 5


state 0

    (0) S' -> . program
    (1) program -> . stmts
    (2) stmts -> . empty
    (3) stmts -> . stmts stmt
    (9) empty -> .
    WHILE           reduce using rule 9 (empty -> .)
    IF              reduce using rule 9 (empty -> .)
    BREAK           reduce using rule 9 (empty -> .)
    ID              reduce using rule 9 (empty -> .)
    error           reduce using rule 9 (empty -> .)
    $end            reduce using rule 9 (empty -> .)

    program                        shift and go to state 1
    stmts                          shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .


state 2

    (1) program -> stmts .
    (3) stmts -> stmts . stmt
    (4) stmt -> . WHILE { stmts }
    (5) stmt -> . IF { stmts }
    (6) stmt -> . BREAK ;
    (7) stmt -> . ID ;
    (8) stmt -> . error ;
    $end            reduce using rule 1 (program -> stmts .)
    WHILE           shift and go to state 5
    IF              shift and go to state 6
    BREAK           shift and go to state 7
    ID              shift and go to state 8
    error           shift and go to state 9

    stmt                           shift and go to state 4

state 3

    (2) stmts -> empty .
    WHILE           reduce using rule 2 (stmts -> empty .)
    IF              reduce using rule 2 (stmts -> empty .)
    BREAK           reduce using rule 2 (stmts -> empty .)
    ID              reduce using rule 2 (stmts -> empty .)
    error           reduce using rule 2 (stmts -> empty .)
    $end            reduce using rule 2 (stmts -> empty .)
    }               reduce using rule 2 (stmts -> empty .)


state 4

    (3) stmts -> stmts stmt .
    WHILE           reduce using rule 3 (stmts -> stmts stmt .)
    IF              reduce using rule 3 (stmts -> stmts stmt .)
    BREAK           reduce using rule 3 (stmts -> stmts stmt .)
    ID              reduce using rule 3 (stmts -> stmts stmt .)
    error           reduce using rule 3 (stmts -> stmts stmt .)
    $end            reduce using rule 3 (stmts -> stmts stmt .)
    }               reduce using rule 3 (stmts -> stmts stmt .)


state 5

    (4) stmt -> WHILE . { stmts }
    {               shift and go to state 10


state 6

    (5) stmt -> IF . { stmts }
    {               shift and go to state 11


state 7

    (6) stmt -> BREAK . ;
    ;               shift and go to state 12


state 8

    (7) stmt -> ID . ;
    ;               shift and go to state 13


state 9

    (8) stmt -> error . ;
    ;               shift and go to state 14


state 10

    (4) stmt -> WHILE { . stmts }
    (2) stmts -> . empty
    (3) stmts -> . stmts stmt
    (9) empty -> .
    }               reduce using rule 9 (empty -> .)
    WHILE           reduce using rule 9 (empty -> .)
    IF              reduce using rule 9 (empty -> .)
    BREAK           reduce using rule 9 (empty -> .)
    ID              reduce using rule 9 (empty -> .)
    error           reduce using rule 9 (empty -> .)

    stmts                          shift and go to state 15
    empty                          shift and go to state 3

state 11

    (5) stmt -> IF { . stmts }
    (2) stmts -> . empty
    (3) stmts -> . stmts stmt
    (9) empty -> .
    }               reduce using rule 9 (empty -> .)
    WHILE           reduce using rule 9 (empty -> .)
    IF              reduce using rule 9 (empty -> .)
    BREAK           reduce using rule 9 (empty -> .)
    ID              reduce using rule 9 (empty -> .)
    error           reduce using rule 9 (empty -> .)

    stmts                          shift and go to state 16
    empty                          shift and go to state 3

state 12

    (6) stmt -> BREAK ; .
    WHILE           reduce using rule 6 (stmt -> BREAK ; .)
    IF              reduce using rule 6 (stmt -> BREAK ; .)
    BREAK           reduce using rule 6 (stmt -> BREAK ; .)
    ID              reduce using rule 6 (stmt -> BREAK ; .)
    error           reduce using rule 6 (stmt -> BREAK ; .)
    $end            reduce using rule 6 (stmt -> BREAK ; .)
    }               reduce using rule 6 (stmt -> BREAK ; .)


state 13

    (7) stmt -> ID ; .
    WHILE           reduce using rule 7 (stmt -> ID ; .)
    IF              reduce using rule 7 (stmt -> ID ; .)
    BREAK           reduce using rule 7 (stmt -> ID ; .)
    ID              reduce using rule 7 (stmt -> ID ; .)
    error           reduce using rule 7 (stmt -> ID ; .)
    $end            reduce using rule 7 (stmt -> ID ; .)
    }               reduce using rule 7 (stmt -> ID ; .)


state 14

    (8) stmt -> error ; .
    WHILE           reduce using rule 8 (stmt -> error ; .)
    IF              reduce using rule 8 (stmt -> error ; .)
    BREAK           reduce using rule 8 (stmt -> error ; .)
    ID              reduce using rule 8 (stmt -> error ; .)
    error           reduce using rule 8 (stmt -> error ; .)
    $end            reduce using rule 8 (stmt -> error ; .)
    }               reduce using rule 8 (stmt -> error ; .)


state 15

    (4) stmt -> WHILE { stmts . }
    (3) stmts -> stmts . stmt
    (4) stmt -> . WHILE { stmts }
    (5) stmt -> . IF { stmts }
    (6) stmt -> . BREAK ;
    (7) stmt -> . ID ;
    (8) stmt -> . error ;
    }               shift and go to state 17
    WHILE           shift and go to state 5
    IF              shift and go to state 6
    BREAK           shift and go to state 7
    ID              shift and go to state 8
    error           shift and go to state 9

    stmt                           shift and go to state 4

state 16

    (5) stmt -> IF { stmts . }
    (3) stmts -> stmts . stmt
    (4) stmt -> . WHILE { stmts }
    (5) stmt -> . IF { stmts }
    (6) stmt -> . BREAK ;
    (7) stmt -> . ID ;
    (8) stmt -> . error ;
    }               shift and go to state 18
    WHILE           shift and go to state 5
    IF              shift and go to state 6
    BREAK           shift and go to state 7
    ID              shift and go to state 8
    error           shift and go to state 9

    stmt                           shift and go to state 4

state 17

    (4) stmt -> WHILE { stmts } .
    WHILE           reduce using rule 4 (stmt -> WHILE { stmts } .)
    IF              reduce using rule 4 (stmt -> WHILE { stmts } .)
    BREAK           reduce using rule 4 (stmt -> WHILE { stmts } .)
    ID              reduce using rule 4 (stmt -> WHILE { stmts } .)
    error           reduce using rule 4 (stmt -> WHILE { stmts } .)
    $end            reduce using rule 4 (stmt -> WHILE { stmts } .)
    }               reduce using rule 4 (stmt -> WHILE { stmts } .)


state 18

    (5) stmt -> IF { stmts } .
    WHILE           reduce using rule 5 (stmt -> IF { stmts } .)
    IF              reduce using rule 5 (stmt -> IF { stmts } .)
    BREAK           reduce using rule 5 (stmt -> IF { stmts } .)
    ID              reduce using rule 5 (stmt -> IF { stmts } .)
    error           reduce using rule 5 (stmt -> IF { stmts } .)
    $end            reduce using rule 5 (stmt -> IF { stmts } .)
    }               reduce using rule 5 (stmt -> IF { stmts } .)
